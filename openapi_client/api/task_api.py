"""
    Future Vuls Public API

    Future Vuls Public API  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.task_add_task_comment_request_body import TaskAddTaskCommentRequestBody
from openapi_client.model.task_add_task_comment_response_body import TaskAddTaskCommentResponseBody
from openapi_client.model.task_get_task_detail_response_body import TaskGetTaskDetailResponseBody
from openapi_client.model.task_get_task_list_response_body import TaskGetTaskListResponseBody
from openapi_client.model.task_update_task_ignore_request_body import TaskUpdateTaskIgnoreRequestBody
from openapi_client.model.task_update_task_ignore_response_body import TaskUpdateTaskIgnoreResponseBody
from openapi_client.model.task_update_task_request_body import TaskUpdateTaskRequestBody
from openapi_client.model.task_update_task_response_body import TaskUpdateTaskResponseBody


class TaskApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.task_add_task_comment_endpoint = _Endpoint(
            settings={
                'response_type': (TaskAddTaskCommentResponseBody,),
                'auth': [
                    'api_key_header_Authorization'
                ],
                'endpoint_path': '/v1/task/{taskID}/comment',
                'operation_id': 'task_add_task_comment',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'task_id',
                    'add_task_comment_request_body',
                    'authorization',
                ],
                'required': [
                    'task_id',
                    'add_task_comment_request_body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'task_id':
                        (int,),
                    'add_task_comment_request_body':
                        (TaskAddTaskCommentRequestBody,),
                    'authorization':
                        (str,),
                },
                'attribute_map': {
                    'task_id': 'taskID',
                    'authorization': 'Authorization',
                },
                'location_map': {
                    'task_id': 'path',
                    'add_task_comment_request_body': 'body',
                    'authorization': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/xml',
                    'application/gob'
                ],
                'content_type': [
                    'application/json',
                    'application/xml',
                    'application/gob'
                ]
            },
            api_client=api_client
        )
        self.task_get_task_detail_endpoint = _Endpoint(
            settings={
                'response_type': (TaskGetTaskDetailResponseBody,),
                'auth': [
                    'api_key_header_Authorization'
                ],
                'endpoint_path': '/v1/task/{taskID}',
                'operation_id': 'task_get_task_detail',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'task_id',
                    'authorization',
                ],
                'required': [
                    'task_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'task_id':
                        (int,),
                    'authorization':
                        (str,),
                },
                'attribute_map': {
                    'task_id': 'taskID',
                    'authorization': 'Authorization',
                },
                'location_map': {
                    'task_id': 'path',
                    'authorization': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/xml',
                    'application/gob'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.task_get_task_list_endpoint = _Endpoint(
            settings={
                'response_type': (TaskGetTaskListResponseBody,),
                'auth': [
                    'api_key_header_Authorization'
                ],
                'endpoint_path': '/v1/tasks',
                'operation_id': 'task_get_task_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'page',
                    'limit',
                    'offset',
                    'filter_status',
                    'filter_priority',
                    'filter_ignore',
                    'filter_main_user_ids',
                    'filter_sub_user_ids',
                    'filter_cve_id',
                    'filter_server_id',
                    'filter_role_id',
                    'filter_pkg_id',
                    'filter_cpe_id',
                    'authorization',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'filter_status',
                    'filter_priority',
                ],
                'validation': [
                    'page',
                    'limit',
                    'offset',
                    'filter_server_id',
                    'filter_role_id',
                    'filter_pkg_id',
                    'filter_cpe_id',
                ]
            },
            root_map={
                'validations': {
                    ('page',): {

                        'inclusive_minimum': 1,
                    },
                    ('limit',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                    ('offset',): {

                        'inclusive_minimum': 0,
                    },
                    ('filter_server_id',): {

                        'inclusive_minimum': 1,
                    },
                    ('filter_role_id',): {

                        'inclusive_minimum': 1,
                    },
                    ('filter_pkg_id',): {

                        'inclusive_minimum': 1,
                    },
                    ('filter_cpe_id',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('filter_status',): {

                        "NEW": "new",
                        "INVESTIGATING": "investigating",
                        "ONGOING": "ongoing",
                        "NOT_AFFECTED": "not_affected",
                        "RISK_ACCEPTED": "risk_accepted",
                        "WORKAROUND": "workaround",
                        "PATCH_APPLIED": "patch_applied"
                    },
                    ('filter_priority',): {

                        "NONE": "none",
                        "HIGH": "high",
                        "MEDIUM": "medium",
                        "LOW": "low"
                    },
                },
                'openapi_types': {
                    'page':
                        (int,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'filter_status':
                        ([str],),
                    'filter_priority':
                        ([str],),
                    'filter_ignore':
                        (bool,),
                    'filter_main_user_ids':
                        ([int],),
                    'filter_sub_user_ids':
                        ([int],),
                    'filter_cve_id':
                        (str,),
                    'filter_server_id':
                        (int,),
                    'filter_role_id':
                        (int,),
                    'filter_pkg_id':
                        (int,),
                    'filter_cpe_id':
                        (int,),
                    'authorization':
                        (str,),
                },
                'attribute_map': {
                    'page': 'page',
                    'limit': 'limit',
                    'offset': 'offset',
                    'filter_status': 'filterStatus',
                    'filter_priority': 'filterPriority',
                    'filter_ignore': 'filterIgnore',
                    'filter_main_user_ids': 'filterMainUserIDs',
                    'filter_sub_user_ids': 'filterSubUserIDs',
                    'filter_cve_id': 'filterCveID',
                    'filter_server_id': 'filterServerID',
                    'filter_role_id': 'filterRoleID',
                    'filter_pkg_id': 'filterPkgID',
                    'filter_cpe_id': 'filterCpeID',
                    'authorization': 'Authorization',
                },
                'location_map': {
                    'page': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'filter_status': 'query',
                    'filter_priority': 'query',
                    'filter_ignore': 'query',
                    'filter_main_user_ids': 'query',
                    'filter_sub_user_ids': 'query',
                    'filter_cve_id': 'query',
                    'filter_server_id': 'query',
                    'filter_role_id': 'query',
                    'filter_pkg_id': 'query',
                    'filter_cpe_id': 'query',
                    'authorization': 'header',
                },
                'collection_format_map': {
                    'filter_status': 'multi',
                    'filter_priority': 'multi',
                    'filter_main_user_ids': 'multi',
                    'filter_sub_user_ids': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/xml',
                    'application/gob'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.task_update_task_endpoint = _Endpoint(
            settings={
                'response_type': (TaskUpdateTaskResponseBody,),
                'auth': [
                    'api_key_header_Authorization'
                ],
                'endpoint_path': '/v1/task/{taskID}',
                'operation_id': 'task_update_task',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'task_id',
                    'update_task_request_body',
                    'authorization',
                ],
                'required': [
                    'task_id',
                    'update_task_request_body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'task_id':
                        (int,),
                    'update_task_request_body':
                        (TaskUpdateTaskRequestBody,),
                    'authorization':
                        (str,),
                },
                'attribute_map': {
                    'task_id': 'taskID',
                    'authorization': 'Authorization',
                },
                'location_map': {
                    'task_id': 'path',
                    'update_task_request_body': 'body',
                    'authorization': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/xml',
                    'application/gob'
                ],
                'content_type': [
                    'application/json',
                    'application/xml',
                    'application/gob'
                ]
            },
            api_client=api_client
        )
        self.task_update_task_ignore_endpoint = _Endpoint(
            settings={
                'response_type': (TaskUpdateTaskIgnoreResponseBody,),
                'auth': [
                    'api_key_header_Authorization'
                ],
                'endpoint_path': '/v1/task/{taskID}/ignore',
                'operation_id': 'task_update_task_ignore',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'task_id',
                    'update_task_ignore_request_body',
                    'authorization',
                ],
                'required': [
                    'task_id',
                    'update_task_ignore_request_body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'task_id':
                        (int,),
                    'update_task_ignore_request_body':
                        (TaskUpdateTaskIgnoreRequestBody,),
                    'authorization':
                        (str,),
                },
                'attribute_map': {
                    'task_id': 'taskID',
                    'authorization': 'Authorization',
                },
                'location_map': {
                    'task_id': 'path',
                    'update_task_ignore_request_body': 'body',
                    'authorization': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/xml',
                    'application/gob'
                ],
                'content_type': [
                    'application/json',
                    'application/xml',
                    'application/gob'
                ]
            },
            api_client=api_client
        )

    def task_add_task_comment(
        self,
        task_id,
        add_task_comment_request_body,
        **kwargs
    ):
        """addTaskComment task  # noqa: E501

        add task comment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.task_add_task_comment(task_id, add_task_comment_request_body, async_req=True)
        >>> result = thread.get()

        Args:
            task_id (int): Task ID
            add_task_comment_request_body (TaskAddTaskCommentRequestBody):

        Keyword Args:
            authorization (str): api key auth. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskAddTaskCommentResponseBody
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['task_id'] = \
            task_id
        kwargs['add_task_comment_request_body'] = \
            add_task_comment_request_body
        return self.task_add_task_comment_endpoint.call_with_http_info(**kwargs)

    def task_get_task_detail(
        self,
        task_id,
        **kwargs
    ):
        """getTaskDetail task  # noqa: E501

        task detail  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.task_get_task_detail(task_id, async_req=True)
        >>> result = thread.get()

        Args:
            task_id (int): Task ID

        Keyword Args:
            authorization (str): api key auth. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskGetTaskDetailResponseBody
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['task_id'] = \
            task_id
        return self.task_get_task_detail_endpoint.call_with_http_info(**kwargs)

    def task_get_task_list(
        self,
        **kwargs
    ):
        """getTaskList task  # noqa: E501

        task list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.task_get_task_list(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            page (int): Page Number. [optional] if omitted the server will use the default value of 1
            limit (int): Limit. [optional] if omitted the server will use the default value of 20
            offset (int): Offset. [optional] if omitted the server will use the default value of 0
            filter_status ([str]): Status filter. [optional] if omitted the server will use the default value of ["new","investigating","ongoing"]
            filter_priority ([str]): Priority filter. [optional]
            filter_ignore (bool): Ignore filter(trueの場合は、非表示のものを取得しない。falseの場合は全件取得). [optional]
            filter_main_user_ids ([int]): MainUserIDs filter. [optional]
            filter_sub_user_ids ([int]): SubUserIDs filter. [optional]
            filter_cve_id (str): CveID filter. [optional]
            filter_server_id (int): ServerID filter. [optional]
            filter_role_id (int): ServerRoleID filter. [optional]
            filter_pkg_id (int): PackageID filter. [optional]
            filter_cpe_id (int): CpeID filter. [optional]
            authorization (str): api key auth. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskGetTaskListResponseBody
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.task_get_task_list_endpoint.call_with_http_info(**kwargs)

    def task_update_task(
        self,
        task_id,
        update_task_request_body,
        **kwargs
    ):
        """updateTask task  # noqa: E501

        update task  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.task_update_task(task_id, update_task_request_body, async_req=True)
        >>> result = thread.get()

        Args:
            task_id (int): Task ID
            update_task_request_body (TaskUpdateTaskRequestBody):

        Keyword Args:
            authorization (str): api key auth. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskUpdateTaskResponseBody
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['task_id'] = \
            task_id
        kwargs['update_task_request_body'] = \
            update_task_request_body
        return self.task_update_task_endpoint.call_with_http_info(**kwargs)

    def task_update_task_ignore(
        self,
        task_id,
        update_task_ignore_request_body,
        **kwargs
    ):
        """updateTaskIgnore task  # noqa: E501

        update task ignore  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.task_update_task_ignore(task_id, update_task_ignore_request_body, async_req=True)
        >>> result = thread.get()

        Args:
            task_id (int): Task ID
            update_task_ignore_request_body (TaskUpdateTaskIgnoreRequestBody):

        Keyword Args:
            authorization (str): api key auth. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskUpdateTaskIgnoreResponseBody
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['task_id'] = \
            task_id
        kwargs['update_task_ignore_request_body'] = \
            update_task_ignore_request_body
        return self.task_update_task_ignore_endpoint.call_with_http_info(**kwargs)

