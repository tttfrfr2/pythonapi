"""
    Future Vuls Public API

    Future Vuls Public API  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.server_create_pkg_paste_server_request_body import ServerCreatePkgPasteServerRequestBody
from openapi_client.model.server_create_pkg_paste_server_response_body import ServerCreatePkgPasteServerResponseBody
from openapi_client.model.server_get_server_detail_by_uuid_response_body import ServerGetServerDetailByUUIDResponseBody
from openapi_client.model.server_get_server_detail_response_body import ServerGetServerDetailResponseBody
from openapi_client.model.server_get_server_list_response_body import ServerGetServerListResponseBody
from openapi_client.model.server_update_pkg_paste_server_request_body import ServerUpdatePkgPasteServerRequestBody
from openapi_client.model.server_update_server_request_body import ServerUpdateServerRequestBody
from openapi_client.model.server_update_server_response_body import ServerUpdateServerResponseBody


class ServerApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.server_create_pkg_paste_server_endpoint = _Endpoint(
            settings={
                'response_type': (ServerCreatePkgPasteServerResponseBody,),
                'auth': [
                    'api_key_header_Authorization'
                ],
                'endpoint_path': '/v1/server/paste',
                'operation_id': 'server_create_pkg_paste_server',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'create_pkg_paste_server_request_body',
                    'authorization',
                ],
                'required': [
                    'create_pkg_paste_server_request_body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'create_pkg_paste_server_request_body':
                        (ServerCreatePkgPasteServerRequestBody,),
                    'authorization':
                        (str,),
                },
                'attribute_map': {
                    'authorization': 'Authorization',
                },
                'location_map': {
                    'create_pkg_paste_server_request_body': 'body',
                    'authorization': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/xml',
                    'application/gob'
                ],
                'content_type': [
                    'application/json',
                    'application/xml',
                    'application/gob'
                ]
            },
            api_client=api_client
        )
        self.server_delete_server_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'api_key_header_Authorization'
                ],
                'endpoint_path': '/v1/server/{serverID}',
                'operation_id': 'server_delete_server',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'server_id',
                    'authorization',
                ],
                'required': [
                    'server_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'server_id':
                        (int,),
                    'authorization':
                        (str,),
                },
                'attribute_map': {
                    'server_id': 'serverID',
                    'authorization': 'Authorization',
                },
                'location_map': {
                    'server_id': 'path',
                    'authorization': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.server_get_server_detail_endpoint = _Endpoint(
            settings={
                'response_type': (ServerGetServerDetailResponseBody,),
                'auth': [
                    'api_key_header_Authorization'
                ],
                'endpoint_path': '/v1/server/{serverID}',
                'operation_id': 'server_get_server_detail',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'server_id',
                    'authorization',
                ],
                'required': [
                    'server_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'server_id':
                        (int,),
                    'authorization':
                        (str,),
                },
                'attribute_map': {
                    'server_id': 'serverID',
                    'authorization': 'Authorization',
                },
                'location_map': {
                    'server_id': 'path',
                    'authorization': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/xml',
                    'application/gob'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.server_get_server_detail_by_uuid_endpoint = _Endpoint(
            settings={
                'response_type': (ServerGetServerDetailByUUIDResponseBody,),
                'auth': [
                    'api_key_header_Authorization'
                ],
                'endpoint_path': '/v1/server/uuid/{serverUuid}',
                'operation_id': 'server_get_server_detail_by_uuid',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'server_uuid',
                    'authorization',
                ],
                'required': [
                    'server_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'server_uuid':
                        (str,),
                    'authorization':
                        (str,),
                },
                'attribute_map': {
                    'server_uuid': 'serverUuid',
                    'authorization': 'Authorization',
                },
                'location_map': {
                    'server_uuid': 'path',
                    'authorization': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/xml',
                    'application/gob'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.server_get_server_list_endpoint = _Endpoint(
            settings={
                'response_type': (ServerGetServerListResponseBody,),
                'auth': [
                    'api_key_header_Authorization'
                ],
                'endpoint_path': '/v1/servers',
                'operation_id': 'server_get_server_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'page',
                    'limit',
                    'offset',
                    'filter_cve_id',
                    'filter_role_id',
                    'filter_tag_name',
                    'authorization',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'page',
                    'limit',
                    'offset',
                    'filter_role_id',
                ]
            },
            root_map={
                'validations': {
                    ('page',): {

                        'inclusive_minimum': 1,
                    },
                    ('limit',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                    ('offset',): {

                        'inclusive_minimum': 0,
                    },
                    ('filter_role_id',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'page':
                        (int,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'filter_cve_id':
                        (str,),
                    'filter_role_id':
                        (int,),
                    'filter_tag_name':
                        (str,),
                    'authorization':
                        (str,),
                },
                'attribute_map': {
                    'page': 'page',
                    'limit': 'limit',
                    'offset': 'offset',
                    'filter_cve_id': 'filterCveID',
                    'filter_role_id': 'filterRoleID',
                    'filter_tag_name': 'filterTagName',
                    'authorization': 'Authorization',
                },
                'location_map': {
                    'page': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'filter_cve_id': 'query',
                    'filter_role_id': 'query',
                    'filter_tag_name': 'query',
                    'authorization': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/xml',
                    'application/gob'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.server_update_pkg_paste_server_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'api_key_header_Authorization'
                ],
                'endpoint_path': '/v1/server/paste/{serverID}',
                'operation_id': 'server_update_pkg_paste_server',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'server_id',
                    'update_pkg_paste_server_request_body',
                    'authorization',
                ],
                'required': [
                    'server_id',
                    'update_pkg_paste_server_request_body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'server_id':
                        (int,),
                    'update_pkg_paste_server_request_body':
                        (ServerUpdatePkgPasteServerRequestBody,),
                    'authorization':
                        (str,),
                },
                'attribute_map': {
                    'server_id': 'serverID',
                    'authorization': 'Authorization',
                },
                'location_map': {
                    'server_id': 'path',
                    'update_pkg_paste_server_request_body': 'body',
                    'authorization': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json',
                    'application/xml',
                    'application/gob'
                ]
            },
            api_client=api_client
        )
        self.server_update_server_endpoint = _Endpoint(
            settings={
                'response_type': (ServerUpdateServerResponseBody,),
                'auth': [
                    'api_key_header_Authorization'
                ],
                'endpoint_path': '/v1/server/{serverID}',
                'operation_id': 'server_update_server',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'server_id',
                    'update_server_request_body',
                    'authorization',
                ],
                'required': [
                    'server_id',
                    'update_server_request_body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'server_id':
                        (int,),
                    'update_server_request_body':
                        (ServerUpdateServerRequestBody,),
                    'authorization':
                        (str,),
                },
                'attribute_map': {
                    'server_id': 'serverID',
                    'authorization': 'Authorization',
                },
                'location_map': {
                    'server_id': 'path',
                    'update_server_request_body': 'body',
                    'authorization': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/xml',
                    'application/gob'
                ],
                'content_type': [
                    'application/json',
                    'application/xml',
                    'application/gob'
                ]
            },
            api_client=api_client
        )

    def server_create_pkg_paste_server(
        self,
        create_pkg_paste_server_request_body,
        **kwargs
    ):
        """createPkgPasteServer server  # noqa: E501

        create paste server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.server_create_pkg_paste_server(create_pkg_paste_server_request_body, async_req=True)
        >>> result = thread.get()

        Args:
            create_pkg_paste_server_request_body (ServerCreatePkgPasteServerRequestBody):

        Keyword Args:
            authorization (str): api key auth. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ServerCreatePkgPasteServerResponseBody
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['create_pkg_paste_server_request_body'] = \
            create_pkg_paste_server_request_body
        return self.server_create_pkg_paste_server_endpoint.call_with_http_info(**kwargs)

    def server_delete_server(
        self,
        server_id,
        **kwargs
    ):
        """deleteServer server  # noqa: E501

        server delete  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.server_delete_server(server_id, async_req=True)
        >>> result = thread.get()

        Args:
            server_id (int): Server ID

        Keyword Args:
            authorization (str): api key auth. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['server_id'] = \
            server_id
        return self.server_delete_server_endpoint.call_with_http_info(**kwargs)

    def server_get_server_detail(
        self,
        server_id,
        **kwargs
    ):
        """getServerDetail server  # noqa: E501

        server detail  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.server_get_server_detail(server_id, async_req=True)
        >>> result = thread.get()

        Args:
            server_id (int): Server ID

        Keyword Args:
            authorization (str): api key auth. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ServerGetServerDetailResponseBody
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['server_id'] = \
            server_id
        return self.server_get_server_detail_endpoint.call_with_http_info(**kwargs)

    def server_get_server_detail_by_uuid(
        self,
        server_uuid,
        **kwargs
    ):
        """getServerDetailByUUID server  # noqa: E501

        server detail by UUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.server_get_server_detail_by_uuid(server_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            server_uuid (str): Server UUID

        Keyword Args:
            authorization (str): api key auth. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ServerGetServerDetailByUUIDResponseBody
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['server_uuid'] = \
            server_uuid
        return self.server_get_server_detail_by_uuid_endpoint.call_with_http_info(**kwargs)

    def server_get_server_list(
        self,
        **kwargs
    ):
        """getServerList server  # noqa: E501

        server list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.server_get_server_list(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            page (int): Page Number. [optional] if omitted the server will use the default value of 1
            limit (int): Limit. [optional] if omitted the server will use the default value of 20
            offset (int): Offset. [optional] if omitted the server will use the default value of 0
            filter_cve_id (str): CveID filter. [optional]
            filter_role_id (int): ServerRoleID filter. [optional]
            filter_tag_name (str): ServerTagName filter. [optional]
            authorization (str): api key auth. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ServerGetServerListResponseBody
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.server_get_server_list_endpoint.call_with_http_info(**kwargs)

    def server_update_pkg_paste_server(
        self,
        server_id,
        update_pkg_paste_server_request_body,
        **kwargs
    ):
        """updatePkgPasteServer server  # noqa: E501

        update paste server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.server_update_pkg_paste_server(server_id, update_pkg_paste_server_request_body, async_req=True)
        >>> result = thread.get()

        Args:
            server_id (int): Server ID
            update_pkg_paste_server_request_body (ServerUpdatePkgPasteServerRequestBody):

        Keyword Args:
            authorization (str): api key auth. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['server_id'] = \
            server_id
        kwargs['update_pkg_paste_server_request_body'] = \
            update_pkg_paste_server_request_body
        return self.server_update_pkg_paste_server_endpoint.call_with_http_info(**kwargs)

    def server_update_server(
        self,
        server_id,
        update_server_request_body,
        **kwargs
    ):
        """updateServer server  # noqa: E501

        update server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.server_update_server(server_id, update_server_request_body, async_req=True)
        >>> result = thread.get()

        Args:
            server_id (int): Server ID
            update_server_request_body (ServerUpdateServerRequestBody):

        Keyword Args:
            authorization (str): api key auth. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ServerUpdateServerResponseBody
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['server_id'] = \
            server_id
        kwargs['update_server_request_body'] = \
            update_server_request_body
        return self.server_update_server_endpoint.call_with_http_info(**kwargs)

